

{% schema %}
{
  "name": "Product Recommendations",
  "settings": [
    {
      "type": "text",
      "label": "Your Text",
      "id": "text"
    }
  ],
  "blocks": [
    {
      "type": "collection_block",
      "name": "Collection Block",
      "settings": [
        {
          "type": "collection",
          "label": "Collection",
          "id": "collection"
        }
      ]
    }
  ],
  "presets": [
    {
      "category": "custom",
      "name": "Product Recommendations"
    }
  ]
}
{% endschema %}

<div class="wholediv">
  <p>{{section.settings.text}}</p>
  {% for block in section.blocks %}
    <div class="image-block">
      <a href="#" class="open-modal-btn" data-modal-id="PopupModal-{{ block.id }}">
        <div class="image-container">
        {% if block.settings.collection.image %}
          <img src="{{ block.settings.collection.image | img_url: 'medium' }}" alt="Image" class="open-modal-btn">
        {% endif %}
        <div class="overlay">
          <div class="overlay-text">{{ block.settings.collection.title }}</div>
        </div>
        </div>
      </a>
    </div>
  {% endfor %}
</div>

<div class="overlay-bg" id="overlay-bg">

{% for block in section.blocks %}
  <div id="PopupModal-{{ block.id }}" class="modal">
    <div class="modal-content">
      <span class="close">&times;</span>
      <div class="description">
        <p class="modal-description">{{ block.settings.collection.description }}</p>
      </div>
      <div class="product-row">
        {% for product in block.settings.collection.products %}
          <div class="product-item">
            <a href="{{ product.url }}">
              <div class="product-image">
                <img src="{{ product.featured_image | img_url: 'master' }}" alt="{{ product.title }}">
              </div>
              <div class="product-info">
                <h3>{{ product.title }}</h3>
                <p>{{ product.price | money }}</p>
              </div>
            </a>
          </div>
        {% endfor %}
      </div>
    </div>
  </div>

{% endfor %}
</div>

<!-- trying modal -->

<modal-opener
class="open-modal-btn"
data-modal -id="PopupModal-{{ block.id }}"
{{ block.shopify_attributes }}
>
<button
  id="ProductPopup-{{ block.id }}"
  class="product-popup-modal__button link"
  type="button"
  aria-haspopup="dialog"
> 
<a href="{{ product.url }}">
  <div class="product-image">
    <img src="{{ product.featured_image | img_url: 'master' }}" alt="{{ product.title }}">
  </div>
  <div class="product-info">
    <h3>{{ product.title }}</h3>
    <p>{{ product.price | money }}</p>
{{ block.settings.collection.title }}
</button>
</modal-opener>
<a href="{{ block.settings.page.url }}" class="product-popup-modal__button link no-js">
{{- block.settings.text -}}
</a>
<script>

  document.addEventListener("DOMContentLoaded", function () {
    const openModalButtons = document.querySelectorAll('.open-modal-btn');
    const overlayBg = document.getElementById('overlay-bg'); 
    const body = document.body;

    openModalButtons.forEach(button => {
      button.addEventListener('click', (event) => {
        const modalId = button.getAttribute('data-modal-id');
        const modal = document.getElementById(modalId);

        if (modal) {
          modal.style.display = 'block';
          overlayBg.style.display = 'block'; 
          body.style.overflow = 'hidden'; 
          const closeButton = modal.querySelector('.close');
          if (closeButton) {
            closeButton.addEventListener('click', () => {
              modal.style.display = 'none';
              overlayBg.style.display = 'none'; 
              body.style.overflow = 'auto'; 
            });
          }
        }
      });
    });
  });


</script>

<!-- 
class DetailsModal extends HTMLElement {
  constructor() {
    super();
    this.detailsContainer = this.querySelector('details');
    this.summaryToggle = this.querySelector('summary');

    this.detailsContainer.addEventListener('keyup', (event) => event.code.toUpperCase() === 'ESCAPE' && this.close());
    this.summaryToggle.addEventListener('click', this.onSummaryClick.bind(this));
    this.querySelector('button[type="button"]').addEventListener('click', this.close.bind(this));

    this.summaryToggle.setAttribute('role', 'button');
  }

  isOpen() {
    return this.detailsContainer.hasAttribute('open');
  }

  onSummaryClick(event) {
    event.preventDefault();
    event.target.closest('details').hasAttribute('open') ? this.close() : this.open(event);
  }

  onBodyClick(event) {
    if (!this.contains(event.target) || event.target.classList.contains('modal-overlay')) this.close(false);
  }

  open(event) {
    this.onBodyClickEvent = this.onBodyClickEvent || this.onBodyClick.bind(this);
    event.target.closest('details').setAttribute('open', true);
    document.body.addEventListener('click', this.onBodyClickEvent);
    document.body.classList.add('overflow-hidden');

    trapFocus(
      this.detailsContainer.querySelector('[tabindex="-1"]'),
      this.detailsContainer.querySelector('input:not([type="hidden"])')
    );
  }

  close(focusToggle = true) {
    removeTrapFocus(focusToggle ? this.summaryToggle : null);
    this.detailsContainer.removeAttribute('open');
    document.body.removeEventListener('click', this.onBodyClickEvent);
    document.body.classList.remove('overflow-hidden');
  }
}

customElements.define('details-modal', DetailsModal);

if (!customElements.get('product-model')) {
  customElements.define(
    'product-model',
    class ProductModel extends DeferredMedia {
      constructor() {
        super();
      }

      loadContent() {
        super.loadContent();

        Shopify.loadFeatures([
          {
            name: 'model-viewer-ui',
            version: '1.0',
            onLoad: this.setupModelViewerUI.bind(this),
          },
        ]);
      }

      setupModelViewerUI(errors) {
        if (errors) return;

        this.modelViewerUI = new Shopify.ModelViewerUI(this.querySelector('model-viewer'));
      }
    }
  );
}

window.ProductModel = {
  loadShopifyXR() {
    Shopify.loadFeatures([
      {
        name: 'shopify-xr',
        version: '1.0',
        onLoad: this.setupShopifyXR.bind(this),
      },
    ]);
  },

  setupShopifyXR(errors) {
    if (errors) return;

    if (!window.ShopifyXR) {
      document.addEventListener('shopify_xr_initialized', () => this.setupShopifyXR());
      return;
    }

    document.querySelectorAll('[id^="ProductJSON-"]').forEach((modelJSON) => {
      window.ShopifyXR.addModels(JSON.parse(modelJSON.textContent));
      modelJSON.remove();
    });
    window.ShopifyXR.setupXRElements();
  },
};

window.addEventListener('DOMContentLoaded', () => {
  if (window.ProductModel) window.ProductModel.loadShopifyXR();
}); --> -->



<!-- <script>
  document.addEventListener("DOMContentLoaded", function () {
    const openModalButtons = document.querySelectorAll('.open-modal-btn');
    const overlayBg = document.getElementById('overlay-bg'); 
    const body = document.body;

    openModalButtons.forEach(button => {
      button.addEventListener('click', (event) => {
        const modalId = button.getAttribute('data-modal-id');
        const modal = document.getElementById(modalId);

        if (modal) {
          modal.style.display = 'block';
          overlayBg.style.display = 'block'; 
          body.style.overflow = 'hidden'; 
          const closeButton = modal.querySelector('.close');
          if (closeButton) {
            closeButton.addEventListener('click', () => {
              modal.style.display = 'none';
              overlayBg.style.display = 'none'; 
              body.style.overflow = 'auto'; 
            });
          }
        }
      });
    });
  });
</script> -->
<style>
  
  .overlay-bg {
    display: none;
    position: fixed;
    z-index: 999; 
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
  }
  .wholediv {
    display: flex;
    flex-wrap: wrap;
  }

  
  .image-block {
  max-width: 479px; 
  margin: 0 10px;
  align-items: center;
  margin: 10px auto; 
}


  .modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
  }

  .modal-content {
    background-color: white;
    margin:0 auto;
    border: 1px solid #888;
    width: 90%;
    display: flex;
    flex-direction: column; 
    position: relative;
  }

  .close {
    position: absolute;
    top: 0;
    right: 0;
    padding: 10px;
    cursor: pointer;
  }

 
  .product-item {
  display: flex;
  align-items: center;
  width: 100%;
  padding: 10px;
  margin-top: 10px;
}


  .product-item img {
    width: 100px;
    margin-right: 10px;
  }

  .product-info {
    flex: 1; 
  }

  .modal-content img {
    max-width: 100%;
    height: auto; 
    width:233px;
  }

  .open-modal-btn {
    width: 479px;
    
  }

  .description {
    width: 100%;
    text-align: center;
    margin-bottom: 10px;
  }
  
.image-container {
  position: relative;
  overflow: hidden;
}

.overlay {
  position: absolute;
  top: 0;
  left: 0;
  width: 479px;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  opacity: 0;
  transition: opacity 0.3s ease-in-out;
}

.overlay-text {
  color:#f7c6a8;
  font-family: 'Cormorant', serif;
  font-size: 45px;
  text-align: center;
 
}

.image-block:hover .overlay {
  opacity: 1; 
  background: rgb(2, 39, 48, 0.6);
}
.product-row {
    display: flex;
    flex-wrap: wrap;
    justify-content: space-between;
    margin-top: 20px;
  }

  .product-item {
    /* / width: calc(33.33% - 20px);  / */
    width: calc(24.33% - 53px);
    
    margin: 0 auto;
  }

  .product-image {
    width:400px;
  }
  a{
    text-decoration: none;
    text-decoration-color: black;
  }

</style>
